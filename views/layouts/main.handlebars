<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}} | TechShop</title>

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <link rel="stylesheet" href="/css/styles.css">

  {{#if style}}
    <link rel="stylesheet" href="/css/{{style}}">
  {{/if}}
</head>
<body data-cart-id="{{cartId}}">
  {{> navbar}}
  
  <main class="container my-4">
    {{{body}}}
  </main>

  {{> footer}}

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script src="/js/main.js"></script>
  <script>

    function showAlert(message, type = 'success') {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} position-fixed top-0 end-0 m-3 fade show`;
      alertDiv.style.zIndex = '1050';
      alertDiv.style.transition = 'opacity 0.5s ease-in-out';
      alertDiv.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
        ${message}
      `;
      document.body.appendChild(alertDiv);
      
      setTimeout(() => {
        alertDiv.style.opacity = '0';
        setTimeout(() => alertDiv.remove(), 500);
      }, 3000);
    }


    async function updateCartCounter() {
      const cartId = document.body.dataset.cartId;
      const counter = document.getElementById('cart-counter');
      
      if (!cartId || !counter) return;

      try {
        const response = await fetch(`/api/carts/${cartId}`);
        if (response.ok) {
          const cart = await response.json();
          const totalItems = cart.products?.reduce((sum, item) => sum + (item.quantity || 0), 0) || 0;
          counter.textContent = totalItems;
        }
      } catch (error) {
        console.error('Error actualizando contador:', error);
      }
    }


    function setupAddToCartButtons() {
      document.querySelectorAll('[data-action="add-to-cart"]').forEach(button => {
        button.addEventListener('click', async function() {
          const productId = this.dataset.productId;
          const cartId = document.body.dataset.cartId;

          if (!cartId) {
            showAlert('Error: No se encontró el carrito', 'danger');
            return;
          }

          const button = this;
          try {

            button.disabled = true;
            const originalHtml = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';


            const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' }
            });

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.message || 'Error al agregar al carrito');
            }

            // Actualizar interfaz
            showAlert('Producto agregado al carrito');
            await updateCartCounter();

          } catch (error) {
            console.error('Error:', error);
            showAlert(error.message, 'danger');
          } finally {

            button.disabled = false;
            button.innerHTML = originalHtml || '<i class="fas fa-cart-plus"></i> Agregar';
          }
        });
      });
    }


    function setupCartPageFunctions() {
      if (!window.location.pathname.includes('/carts/')) return;


      window.updateQuantity = async (cartId, productId, newQuantity) => {
        if (newQuantity <= 0) {
          if (confirm('¿Eliminar producto del carrito?')) {
            await removeFromCart(cartId, productId);
          }
          return;
        }

        try {
          const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ quantity: newQuantity })
          });

          if (!response.ok) throw new Error('Error al actualizar cantidad');
          window.location.reload();
        } catch (error) {
          showAlert(error.message, 'danger');
        }
      };


      window.removeFromCart = async (cartId, productId) => {
        try {
          const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
            method: 'DELETE'
          });

          if (!response.ok) throw new Error('Error al eliminar producto');
          window.location.reload();
        } catch (error) {
          showAlert(error.message, 'danger');
        }
      };

      window.clearCart = async (cartId) => {
        if (confirm('¿Estás seguro de vaciar todo el carrito?')) {
          try {
            const response = await fetch(`/api/carts/${cartId}`, {
              method: 'DELETE'
            });

            if (!response.ok) throw new Error('Error al vaciar carrito');
            window.location.reload();
          } catch (error) {
            showAlert(error.message, 'danger');
          }
        }
      };
    }


    document.addEventListener('DOMContentLoaded', () => {
      setupAddToCartButtons();
      setupCartPageFunctions();
      updateCartCounter();
    });
  </script>
</body>
</html>